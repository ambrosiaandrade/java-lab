// java-lab/build.gradle

plugins {
    id 'java' // Aplica o plugin Java para compilação
}

group = 'com.java.lab' // Seu grupo/pacote base
version = '1.0.0-SNAPSHOT' // Versão do seu projeto

buildDir = 'build' // Mudando local de build

repositories {
    mavenCentral() // De onde o Gradle vai baixar as bibliotecas
}

// Dependências do projeto (válidas para todo o código-fonte)
dependencies {
    // Para a anotação @NotNull e validação
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // Dependências de teste (se você tiver testes)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1' // Or the latest version
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1' // Often implicitly included by databind, but good to be explicit

}

// Configuração de compatibilidade Java
java {
    sourceCompatibility = '21' // Defina sua versão Java (ex: Java 21)
    targetCompatibility = '21'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' // Garante codificação correta
}

// Tarefa para executar uma classe Main específica
// Você usará esta tarefa para rodar suas classes de exemplo, como LabRecordsDone
// Exemplo de uso: ./gradlew runSpecificMain -PmainClass=records.LabRecordsDone
tasks.register('runSpecificMain', JavaExec) {
    description = 'Runs a specific main class provided via -PmainClass'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath

    doFirst {
        if (!project.hasProperty('mainClass')) {
            throw new GradleException("You must provide the mainClass property, e.g., -PmainClass=your.package.YourMainClass")
        }
        mainClass = project.getProperty('mainClass')
    }

    standardInput = System.in
}
